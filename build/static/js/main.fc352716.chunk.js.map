{"version":3,"sources":["logo.svg","Components/Map/Run.js","Components/Nav/Nav.js","Components/Graph/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","useState","map","setMap","mapContainer","useRef","isRunning","setIsRunning","lng","setLng","lat","setLat","zoom","setZoom","timer","setTimer","dataTimeSeconds","setdataTimeSeconds","displayTime","setDisplayTime","dataDistance","setDataDistance","displayDistance","setDisplayDistance","geojson","useEffect","features","geometry","coordinates","length","coorddisplayTime","navigator","geolocation","watchPosition","data","coords","longitude","latitude","timerID","window","setInterval","geojsonLength","push","from","to","lastDist","getDistance","prevCount","getSource","setData","clearInterval","mapboxgl","container","current","style","center","on","getCenter","toFixed","getZoom","resize","addSource","addLayer","initializeMap","Date","toISOString","substr","className","ref","el","onClick","accessToken","Navi","value","setValue","setWindowWidth","updateDimensions","ww","innerWidth","console","log","addEventListener","maxWidth","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","component","Link","minWidth","Navbar","bg","Brand","as","Collapse","Text","name","source","TrainingCenterDatabase","Activities","Activity","Sport","tracks","Lap","Track","Trackpoint","time","fq","i","s","Time","toTimeString","split","Math","round","DistanceMeters","HeartRateBpm","Value","labels","datasets","fill","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","xAxes","stacked","Graph","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc352716.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect, useState, useRef } from 'react';\r\nimport mapboxgl, { clearPrewarmedResources } from 'mapbox-gl';\r\nimport { getdataDistance, getDistance } from 'geolib';\r\n\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\nexport function Map(props)  {\r\n    const [map, setMap] = useState(null);\r\n    const mapContainer = useRef(null);\r\n\r\n\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [lng, setLng] = useState(5);\r\n    const [lat, setLat] = useState(34);\r\n    const [zoom, setZoom] = useState(2);\r\n    const [timer, setTimer] = useState();\r\n\r\n    const [dataTimeSeconds, setdataTimeSeconds] = useState(0);\r\n    const [displayTime, setDisplayTime] = useState();\r\n\r\n    const [dataDistance, setDataDistance] = useState(0);\r\n    const [displayDistance, setDisplayDistance] = useState(0);\r\n\r\n    var geojson = {\r\n        'type': 'FeatureCollection',\r\n        'features': [\r\n          {\r\n            'type': 'Feature',\r\n            'properties': {},\r\n            'geometry': {\r\n              'type': 'LineString',\r\n              'coordinates': [\r\n                \r\n              ]\r\n          }\r\n        }\r\n        ]\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        \r\n        const initializeMap = ({ setMap, mapContainer }) => {\r\n            const map = new mapboxgl.Map({\r\n              container: mapContainer.current,\r\n              style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n              center: [lng, lat],\r\n              zoom: zoom\r\n            })\r\n        \r\n\r\n\r\n            \r\n            map.on('move', () => {\r\n                setLng(map.getCenter().lng.toFixed(4));\r\n                setLat(map.getCenter().lat.toFixed(4));\r\n                setZoom(map.getZoom().toFixed(2));\r\n            });\r\n            \r\n\r\n            map.on('load', function () {\r\n                setMap(map);\r\n                map.resize();\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': geojson\r\n                });\r\n        \r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                    'line-join': 'round',\r\n                    'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                    'line-color': ' #ff29cb ',\r\n                    'line-width': 4\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        if(isRunning) {\r\n            geojson.features[0].geometry.coordinates.length = 0;\r\n\r\n            \r\n\r\n        \r\n            var coorddisplayTime = [];\r\n            navigator.geolocation.watchPosition(data => { coorddisplayTime = [data.coords.longitude, data.coords.latitude]\r\n            } );\r\n            \r\n            var timerID = window.setInterval(function () {\r\n                var geojsonLength = geojson.features[0].geometry.coordinates.length;\r\n\r\n\r\n                // Actualisation des coordonn√©es\r\n                if(coorddisplayTime.length !==0 && coorddisplayTime != geojson.features[0].geometry.coordinates[geojsonLength-1]) {\r\n                    geojson.features[0].geometry.coordinates.push(coorddisplayTime);\r\n                    if(geojsonLength >= 1) {\r\n                        var from =  {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength -1][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength -1][0],\r\n                        };\r\n                          var to =  {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength -0][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength -0][0],\r\n                        };\r\n                        var lastDist = getDistance(from,to);\r\n                        setDataDistance(prevCount => prevCount + lastDist);\r\n                    }\r\n                }\r\n\r\n                map.getSource('route').setData(geojson);\r\n\r\n                // Actualisation du temps\r\n                setdataTimeSeconds(prevCount => prevCount + 1000);\r\n\r\n            }, 1000);\r\n\r\n            setTimer(timerID);\r\n\r\n        }\r\n        else {\r\n            window.clearInterval(timer)\r\n        };\r\n            \r\n        \r\n\r\n        if (!map) initializeMap({ setMap, mapContainer });\r\n\r\n\r\n    }, [isRunning] );\r\n        \r\n    useEffect(() => {\r\n        // Temps\r\n        setDisplayTime(new Date(dataTimeSeconds).toISOString().substr(11, 8));\r\n\r\n        // Distance\r\n        setDisplayDistance(dataDistance/1000);\r\n\r\n    },[dataTimeSeconds, dataDistance])\r\n        \r\n    return (\r\n        <div>\r\n            <div className='sidebarStyle'>\r\n                <div>Longitude: {lng} | Latitude: {lat} | Zoom: {zoom} | Time : {displayTime} | Kilom√®tres : {displayDistance} km </div>\r\n            </div>\r\n            <div ref={el => mapContainer.current = el} className=\"mapContainer\" />\r\n            <div>\r\n                <button onClick={() => {setIsRunning(!isRunning)}}>D√©marrer</button>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n","import {Link } from 'react-router-dom';\r\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\nimport './Nav.css'\r\nimport {Navbar, Nav} from 'react-bootstrap'\r\nimport MediaQuery from 'react-responsive'\r\n\r\n\r\n\r\n\r\nexport default function Navi() {\r\n\r\n    const [value,setValue] = useState(); \r\n    \r\n    const[windowWidth, setWindowWidth] = useState(0);\r\n\r\n    var updateDimensions = () => {\r\n        var ww = typeof window !== \"undefined\" ? window.innerWidth : 0;\r\n        console.log(ww);\r\n        setWindowWidth(ww);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        updateDimensions();\r\n        window.addEventListener('resize',updateDimensions())\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <MediaQuery maxWidth={1000}>\r\n                <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                }}\r\n                showLabels={true}\r\n                className=\"styleBar\" \r\n                >\r\n                    <BottomNavigationAction label=\"Run\" icon={<DirectionsRunIcon />} component={Link} to='/run' /> \r\n                    <BottomNavigationAction label=\"Home\"  icon={<HomeIcon />} component={Link} to='/' /> \r\n                    <BottomNavigationAction label=\"Graph\" icon={<TrendingUpIcon />} component={Link} to='/graph' /> \r\n\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n\r\n            \r\n            <MediaQuery minWidth={1000}>\r\n                <Navbar bg=\"light\">\r\n                    <Navbar.Brand as={Link} to=\"/\" >Hashiru</Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} to=\"/run\">Run</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/graph\">Graph</Nav.Link>\r\n                    </Nav>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                        Derni√®re m√†j le 05/11/2020\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </MediaQuery>\r\n\r\n\r\n            \r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport source from '../../json/source.json';\r\n\r\nconst name = source.TrainingCenterDatabase.Activities.Activity.Sport;\r\nconst tracks = source.TrainingCenterDatabase.Activities.Activity.Lap.Track[0].Trackpoint;\r\n\r\nconst distance = [];\r\nconst time = [];\r\nconst fq = [];\r\n\r\nlet i = 20;\r\nconst setTime = tracks.map(s => {\r\n  if (i == 20) {\r\n    time.push(new Date(s.Time).toTimeString().split(' ')[0] + \" - \" + Math.round(s.DistanceMeters) + \"m\")\r\n    i = 0;\r\n  }\r\n  i++;\r\n});\r\n\r\ni = 20;\r\nconst setFq = tracks.map(s => {\r\n  if (i == 20) {\r\n    fq.push(s.HeartRateBpm.Value)\r\n    i = 0;\r\n  }\r\n  i++;\r\n});\r\n\r\nconst data = {\r\n  labels: time,\r\n  datasets: [\r\n    {\r\n      label: 'Fr√©quence cardiaque',\r\n      fill: false,\r\n      backgroundColor: 'rgba(210,0,0,0.4)',\r\n      borderColor: 'rgba(255,0,0,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(210,0,0,0.4)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(210,0,0,0.4)',\r\n      pointHoverBorderColor: 'rgba(255,0,0,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: fq\r\n    }\r\n  ]\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    xAxes: [{\r\n      stacked: true\r\n    }]\r\n  }\r\n}\r\n\r\nexport default function Graph() {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Sport: {name}</h2>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport {Map} from './Components/Map/Run.js'\nimport Nav from './Components/Nav/Nav.js'\nimport Graph from './Components/Graph/Graph'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <Nav/>        \n        <Switch>\n          <Route path=\"/graph\" component={Graph}/>\n          <Route path=\"/run\" component={Map}/>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}