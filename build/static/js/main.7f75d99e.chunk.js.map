{"version":3,"sources":["Components/Run.js","Components/Nav.js","Components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","useState","map","setMap","mapContainer","useRef","running","setRunning","pause","setPause","lng","setLng","lat","setLat","zoom","setZoom","timer","setTimer","dataTimeSeconds","setdataTimeSeconds","displayTime","setDisplayTime","dataDistance","setDataDistance","displayDistance","setDisplayDistance","geojson","useEffect","mapboxgl","container","current","style","center","on","getCenter","toFixed","getZoom","resize","addSource","addLayer","initializeMap","coorddisplayTime","navigator","geolocation","watchPosition","data","coords","longitude","latitude","timerID","window","setInterval","geojsonLength","features","geometry","coordinates","length","push","from","to","lastDist","getDistance","prevCount","getSource","setData","clearInterval","Date","toISOString","substr","className","ref","el","onClick","accessToken","Navi","value","setValue","maxDeviceWidth","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","component","Link","minDeviceWidth","Navbar","as","Brand","src","height","alt","Graph","source","TrainingCenterDatabase","Activities","Activity","Sport","tracks","Lap","Track","Trackpoint","geojsondata","markers","s","cc","Position","LongitudeDegrees","LatitudeDegrees","fitBounds","distance","time","fq","graph","setGraph","totalDist","setTotalDist","totalTime","setTotalTime","runStart","setRunStart","runEnd","setRunEnd","chartContainer","Math","round","DistanceMeters","Time","toTimeString","split","HeartRateBpm","Value","fullDistance","fullFq","f","d","console","log","t1","t2","parts","d1","d2","getHours","getMinutes","getSeconds","time_diff","moments","j","min","max","actmin","pos","k","fullData","labels","datasets","fill","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","line","forEach","m","type","mode","scaleID","borderWidth","options","annotation","annotations","bounds","reduce","coord","extend","LngLatBounds","padding","class","Slider","valueLabelDisplay","aria-labelledby","redraw","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f75d99e.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { getDistance } from 'geolib';\r\n\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\nexport function Map(props)  {\r\n    const [map, setMap] = useState(null);\r\n    const mapContainer = useRef(null);\r\n\r\n\r\n    const [running, setRunning] = useState(false);\r\n    const [pause, setPause] = useState(false);\r\n    const [lng, setLng] = useState(5);\r\n    const [lat, setLat] = useState(34);\r\n    const [zoom, setZoom] = useState(2);\r\n    const [timer, setTimer] = useState(); \r\n\r\n    const [dataTimeSeconds, setdataTimeSeconds] = useState(0);\r\n    const [displayTime, setDisplayTime] = useState();\r\n\r\n    const [dataDistance, setDataDistance] = useState(0);\r\n    const [displayDistance, setDisplayDistance] = useState(0);\r\n\r\n    var geojsondata = {\r\n        'type': 'FeatureCollection',\r\n        'features': [\r\n          {\r\n            'type': 'Feature',\r\n            'properties': {},\r\n            'geometry': {\r\n              'type': 'LineString',\r\n              'coordinates': [\r\n                \r\n              ]\r\n          }\r\n        }\r\n        ]\r\n    };\r\n\r\n\r\n    const [geojson, setGeojson] = useState(geojsondata);\r\n\r\n\r\n    // Initialisation de la map\r\n    useEffect(() => {\r\n\r\n        \r\n        const initializeMap = ({ setMap, mapContainer }) => {\r\n            const map = new mapboxgl.Map({\r\n              container: mapContainer.current,\r\n              style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n              center: [lng, lat],\r\n              zoom: zoom\r\n            })\r\n        \r\n\r\n\r\n            \r\n            map.on('move', () => {\r\n                setLng(map.getCenter().lng.toFixed(4));\r\n                setLat(map.getCenter().lat.toFixed(4));\r\n                setZoom(map.getZoom().toFixed(2));\r\n            });\r\n            \r\n\r\n            map.on('load', function () {\r\n                setMap(map);\r\n                map.resize();\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': geojson\r\n                });\r\n        \r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                    'line-join': 'round',\r\n                    'line-cap': 'round',\r\n                    },\r\n                    'paint': {\r\n                    'line-color': ' #ff29cb ',\r\n                    'line-width': 4\r\n                    }\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n        \r\n        if (!map) initializeMap({ setMap, mapContainer });\r\n\r\n\r\n    }, [running] );\r\n    \r\n\r\n    // Algorithme de course\r\n    useEffect(() => {\r\n        if(running && !pause) {\r\n            \r\n            var coorddisplayTime = [];\r\n            navigator.geolocation.watchPosition(data => { coorddisplayTime = [data.coords.longitude, data.coords.latitude]\r\n            } );\r\n            \r\n            var timerID = window.setInterval(function () {\r\n            var geojsonLength = geojson.features[0].geometry.coordinates.length;\r\n\r\n\r\n                // Actualisation de la distance et des coordonnées\r\n                if(coorddisplayTime.length !==0 && coorddisplayTime != geojson.features[0].geometry.coordinates[geojsonLength-1]) {\r\n                    geojson.features[0].geometry.coordinates.push(coorddisplayTime);\r\n\r\n                    if(geojsonLength >= 1) {\r\n                        var from =  {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength -1][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength -1][0],\r\n                        };\r\n                          var to =  {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength -0][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength -0][0],\r\n                        };\r\n                        var lastDist = getDistance(from,to);\r\n                        setDataDistance(prevCount => prevCount + lastDist);\r\n                    }\r\n                }\r\n\r\n                // Actualisation du temps\r\n                setdataTimeSeconds(prevCount => prevCount + 1000);\r\n\r\n                map.getSource('route').setData(geojson);\r\n                //map.setLayoutProperty('route','visibility','none');\r\n\r\n\r\n            }, 1000);\r\n            map.getSource('route').setData(geojson);\r\n\r\n            setTimer(timerID);\r\n\r\n        }\r\n        else if(running && pause) {\r\n            window.clearInterval(timer);\r\n        }\r\n        else if(!running) {\r\n             // Sauvegarde de la course\r\n             \r\n\r\n             // Réinitialisation \r\n             window.clearInterval(timer)\r\n             geojson.features[0].geometry.coordinates.length = 0;\r\n             setPause(false);\r\n             setdataTimeSeconds(0);\r\n             setDataDistance(0);\r\n        }\r\n    },[running,pause]);\r\n    \r\n    useEffect(() => {\r\n        // Temps\r\n        setDisplayTime(new Date(dataTimeSeconds).toISOString().substr(11, 8));\r\n\r\n        // Distance\r\n        setDisplayDistance(dataDistance/1000);\r\n    },[dataTimeSeconds, dataDistance])\r\n        \r\n    return (\r\n        <div>\r\n            <div className='sidebarStyle'>\r\n                <div>Longitude: {lng} | Latitude: {lat} | Zoom: {zoom} | Time : {displayTime} | Kilomètres : {displayDistance} km </div>\r\n            </div>\r\n            <div ref={el => mapContainer.current = el} className=\"mapContainer\" />\r\n            {!running &&\r\n                <button onClick={() => {setRunning(!running)}}>Démarrer</button>\r\n            }\r\n            {running &&\r\n                <div>\r\n                    <button onClick={() => {setPause(!pause)}}>Pause</button>\r\n                    <button onClick={() => {setRunning(!running)}}>Arrêter</button>\r\n                </div>\r\n            }\r\n            \r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n","// React\r\nimport { Link } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\n\r\n// Styles imports\r\nimport './Nav.css'\r\n\r\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\n\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport MediaQuery from 'react-responsive'\r\n\r\n\r\nconst styles = {\r\n    stickToBottom: {\r\n        width: '100%',\r\n        position: 'fixed',\r\n        bottom: 0,\r\n    },\r\n};\r\n\r\nexport default function Navi() {\r\n\r\n    const [value, setValue] = useState();\r\n\r\n\r\n    return (\r\n        <div>\r\n            <MediaQuery maxDeviceWidth={1000}>\r\n                <BottomNavigation\r\n                    value={value}\r\n                    onChange={(event, newValue) => {\r\n                        setValue(newValue);\r\n                    }}\r\n                    showLabels={true}\r\n                    className=\"fixed-bottom\"\r\n                >\r\n                    <BottomNavigationAction label=\"Run\" icon={<DirectionsRunIcon />} component={Link} to='/run' />\r\n                    <BottomNavigationAction label=\"Home\" icon={<HomeIcon />} component={Link} to='/' />\r\n                    <BottomNavigationAction label=\"Graph\" icon={<TrendingUpIcon />} component={Link} to='/graph' />\r\n\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n\r\n\r\n            <MediaQuery minDeviceWidth={1000}>\r\n                <Navbar className=\"navbar navbar-dark \">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} to=\"/\" >        \r\n\r\n\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/\" className=\"navText\">Accueil</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/run\" className=\"navText disabled\" >Course</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/graph\" className=\"navText\">Graphique</Nav.Link>\r\n                    </Nav>\r\n                    <Navbar.Brand className=\"justify-content-end\">\r\n                        <Navbar.Brand>\r\n                            <img\r\n                                src=\"bluebody.png\"\r\n                                height=\"40\"\r\n                                alt=\"Hashiru\"\r\n                            />\r\n                        </Navbar.Brand>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Brand className=\"justify-content-end\">\r\n                        <Navbar.Brand>\r\n                            <img\r\n                                src=\"bluetxt.png\"\r\n                                height=\"40\"\r\n                                alt=\"Hashiru\"\r\n                            />\r\n                        </Navbar.Brand>\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n            </MediaQuery>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport source from '../json/source.json';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport \"chartjs-plugin-annotation\";\r\nimport \"./Graph.css\";\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\n\r\nexport default function Graph(props) {\r\n\r\n  // Global Variables\r\n\r\n  const name = source.TrainingCenterDatabase.Activities.Activity.Sport;\r\n  const tracks = source.TrainingCenterDatabase.Activities.Activity.Lap.Track[0].Trackpoint;\r\n\r\n  /*\r\n   *\r\n   * Map Display\r\n   * \r\n   */\r\n\r\n  var geojsondata = {\r\n    'type': 'FeatureCollection',\r\n    'features': [\r\n      {\r\n        'type': 'Feature',\r\n        'properties': {},\r\n        'geometry': {\r\n          'type': 'LineString',\r\n          'coordinates': [\r\n\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  var markers = {\r\n    'type': 'FeatureCollection',\r\n    'features': [\r\n      {\r\n        // Départ\r\n        'type': 'Feature',\r\n        'geometry': {\r\n          'type': 'Point',\r\n          'coordinates': [0, 0]\r\n        },\r\n        'properties': {\r\n          'title': 'Début de la course'\r\n        }\r\n      },\r\n      {\r\n        // Arrivée\r\n        'type': 'Feature',\r\n        'geometry': {\r\n          'type': 'Point',\r\n          'coordinates': [2, 2]\r\n        },\r\n        'properties': {\r\n          'title': 'Fin de la course'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n  const [geojson, setGeojson] = useState(geojsondata);\r\n\r\n\r\n\r\n  // Track initialization\r\n\r\n  const setCoords = tracks.map(s => {\r\n    var cc = [s.Position.LongitudeDegrees, s.Position.LatitudeDegrees];\r\n    geojsondata.features[0].geometry.coordinates.push(cc)\r\n  });\r\n\r\n  useEffect(() => {\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [0, 0],\r\n        zoom: 5\r\n      })\r\n\r\n      map.on('load', function () {\r\n        setMap(map);\r\n        map.resize();\r\n        map.addSource('route', {\r\n          'type': 'geojson',\r\n          'data': geojson\r\n        });\r\n\r\n        map.addLayer({\r\n          'id': 'route',\r\n          'type': 'line',\r\n          'source': 'route',\r\n          'layout': {\r\n            'line-join': 'round',\r\n            'line-cap': 'round',\r\n          },\r\n          'paint': {\r\n            'line-color': ' #dc3545 ',\r\n            'line-width': 4\r\n          }\r\n        });\r\n\r\n        map.addSource('parcours-points', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            'type': 'FeatureCollection',\r\n            'features': [\r\n              {\r\n                'type': 'Feature',\r\n                'geometry': {\r\n                  'type': 'Point',\r\n                  'coordinates': [-121.415061, 40.506229]\r\n                }\r\n              },\r\n              {\r\n                'type': 'Feature',\r\n                'geometry': {\r\n                  'type': 'Point',\r\n                  'coordinates': [-121.505184, 40.488084]\r\n                }\r\n              },\r\n              {\r\n                'type': 'Feature',\r\n                'geometry': {\r\n                  'type': 'Point',\r\n                  'coordinates': [-121.354465, 40.488737]\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        });\r\n\r\n\r\n\r\n        map.addLayer({\r\n          'id': 'points',\r\n          'type': 'circle',\r\n          'source': 'parcours-points',\r\n          'paint': {\r\n            'circle-radius': 6,\r\n            'circle-color': '#18182F'\r\n          }\r\n        });\r\n\r\n\r\n      });\r\n    }\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n    if (map) fitBounds();\r\n\r\n  });\r\n\r\n  /*\r\n   *\r\n   * Graphs\r\n   *\r\n   */\r\n\r\n  // Variables\r\n\r\n\r\n  var distance = [];\r\n  var time = [];\r\n  var fq = [];\r\n  var coords = [];\r\n  const [value, setValue] = useState([0, 1000]);\r\n  const [graph, setGraph] = useState(false);\r\n  const [totalDist, setTotalDist] = useState(0);\r\n  const [totalTime, setTotalTime] = useState();\r\n  const [runStart, setRunStart] = useState();\r\n  const [runEnd, setRunEnd] = useState();\r\n\r\n\r\n\r\n\r\n  const chartContainer = useRef(null);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  // Distance\r\n  let i = 20;\r\n  const setDistance = tracks.map(s => {\r\n    distance.push(Math.round(s.DistanceMeters))\r\n  });\r\n\r\n  // Time\r\n  const setTime = tracks.map(s => {\r\n\r\n    time.push(new Date(s.Time).toTimeString().split(' ')[0])\r\n\r\n\r\n  });\r\n\r\n  // Fq\r\n  i = 20;\r\n  const setFq = tracks.map(s => {\r\n    fq.push(s.HeartRateBpm.Value)\r\n  });\r\n\r\n  // FULL GRAPH\r\n  const fullDistance = [];\r\n  const fullFq = [];\r\n\r\n  const setFullFq = fq.map(f => {\r\n    fullFq.push(f)\r\n  });\r\n\r\n  const setFullDistance = distance.map(d => {\r\n    fullDistance.push(d)\r\n  });\r\n  console.log(fullDistance[fullDistance.length - 1]);\r\n\r\n  useEffect(() => {\r\n    setTotalDist(fullDistance[fullDistance.length - 1]);\r\n    setRunStart(time[0]);\r\n    setRunEnd(time[time.length - 1]);\r\n    setTotalTime(time_diff(time[time.length - 1],time[0]));\r\n\r\n  });\r\n\r\n\r\n  const moments = [];\r\n\r\n  for (let j = 0; j < 3; j++) {\r\n    let min = 1 + (fq.length / 3) * j;\r\n    let max = (fq.length / 3) + ((fq.length / 3) * j);\r\n\r\n    let actmin = 99999;\r\n    let pos = \"\";\r\n    for (let k = min; k < max; k++) {\r\n      if (fq[k] < actmin) {\r\n        actmin = fq[k];\r\n        pos = k;\r\n      }\r\n    }\r\n    moments.push(pos);\r\n  }\r\n\r\n  var fullData = {\r\n    labels: fullDistance,\r\n    datasets: [\r\n      {\r\n        label: 'Fréquence cardiaque',\r\n\r\n        fill: false,\r\n        backgroundColor: 'rgba(210,0,0,0.4)',\r\n        borderColor: 'rgba(255,0,0,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n\r\n        pointBorderColor: 'rgba(210,0,0,0.4)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(210,0,0,0.4)',\r\n        pointHoverBorderColor: 'rgba(255,0,0,1)',\r\n        pointHoverBorderWidth: 2,\r\n\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n\r\n        data: fullFq\r\n      }\r\n    ]\r\n  };\r\n\r\n  let line = [];\r\n  moments.forEach(m => line.push({\r\n    type: 'line',\r\n    mode: 'vertical',\r\n    scaleID: 'x-axis-0',\r\n    value: m,\r\n    borderColor: '#2984c5',\r\n    borderWidth: 2\r\n  }));\r\n\r\n  const options = {\r\n    annotation: {\r\n      annotations: line\r\n    },\r\n  };\r\n\r\n\r\n  // Adapative graph\r\n\r\n  var data = {\r\n    labels: distance,\r\n    datasets: [\r\n      {\r\n        label: 'Fréquence cardiaque',\r\n\r\n        fill: false,\r\n        backgroundColor: 'rgba(210,0,0,0.4)',\r\n        borderColor: 'rgba(255,0,0,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n\r\n        pointBorderColor: 'rgba(210,0,0,0.4)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(210,0,0,0.4)',\r\n        pointHoverBorderColor: 'rgba(255,0,0,1)',\r\n        pointHoverBorderWidth: 2,\r\n\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n\r\n        data: fq\r\n      }\r\n    ]\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    fq = []\r\n    var updateFq = tracks.map(s => {\r\n      if (s.DistanceMeters < value[1] && s.DistanceMeters > value[0]) {\r\n        fq.push(s.HeartRateBpm.Value)\r\n      }\r\n\r\n\r\n    });\r\n\r\n    distance = []\r\n    var updateDist = tracks.map(s => {\r\n\r\n      if (s.DistanceMeters < value[1] && s.DistanceMeters > value[0]) {\r\n        distance.push(Math.round(s.DistanceMeters))\r\n      }\r\n\r\n\r\n\r\n    });\r\n\r\n    coords = []\r\n    var updateCoords = tracks.map(s => {\r\n      var cc = [s.Position.LongitudeDegrees, s.Position.LatitudeDegrees];\r\n      if (s.DistanceMeters < value[1] && s.DistanceMeters > value[0]) {\r\n        coords.push(cc)\r\n      }\r\n    });\r\n\r\n    data.labels = distance;\r\n    data.datasets[0].data = fq;\r\n    markers.features[0].geometry.coordinates = coords[0];\r\n    markers.features[1].geometry.coordinates = coords[coords.length - 1];\r\n\r\n    if (map) {\r\n      map.getSource('parcours-points').setData(markers);\r\n\r\n    }\r\n\r\n\r\n  })\r\n\r\n  function fitBounds() {\r\n    var coordinates = geojsondata.features[0].geometry.coordinates;\r\n    var bounds = coordinates.reduce(function (bounds, coord) {\r\n      return bounds.extend(coord);\r\n    }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\r\n\r\n    map.fitBounds(bounds, {\r\n      padding: 20\r\n    });\r\n  };\r\n\r\n  function time_diff(t1, t2) {\r\n    var parts = t1.split(':');\r\n    var d1 = new Date(0, 0, 0, parts[0], parts[1], parts[2]);\r\n    parts = t2.split(':');\r\n    var d2 = new Date(new Date(0, 0, 0, parts[0], parts[1], parts[2]) - d1);\r\n    if(d2.getHours() !== 0) return (d2.getHours() + ':' + d2.getMinutes() + ':' + d2.getSeconds());\r\n    return ( d2.getMinutes() + ':' + d2.getSeconds());\r\n };\r\n\r\n  return (\r\n    <div className=\"px-5 pb-2\">\r\n      <div ref={el => mapContainer.current = el} className=\"mapContainer border border-danger  my-2\" />\r\n      <div class=\"row\">\r\n        <div class=\"col-md-4\">\r\n          <div class=\"card bg-white\">\r\n            <h5 className=\"card-header\">Résumé du parcours</h5>\r\n            <div class=\"card-body p-3\">\r\n              <ul class=\"fa-ul\">\r\n                <li><span class=\"fa-li\"><i class=\"fas fa-map-marker-alt\"></i></span><p>Distance : {totalDist / 1000} km</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"far fa-hourglass\"></i></span><p>Durée : {totalTime}</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"fas fa-clock\"></i></span><p>Heure de départ : {runStart}</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"far fa-clock\"></i></span><p>Heure d'arrivée : {runEnd}</p></li>\r\n\r\n              </ul>\r\n              <button onClick={() => fitBounds()} className=\"btn btn-outline-danger m-1\">Recentrer</button>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n        <div class=\"col-md-8 \">\r\n          {graph &&\r\n            <div class=\"card\">\r\n              <div class=\"card-body p-3\">\r\n                <button onClick={() => { setGraph(false) }} className=\"btn btn-outline-danger m-1\">Tout le parcours</button>\r\n                <button onClick={() => { setGraph(true) }} className=\"btn btn-outline-danger m-1 active\">Portion du parcours</button>\r\n                <p>Choisir la portion de parcours sur laquelle vous voulez analyser la FQ : </p>\r\n                <Slider\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  valueLabelDisplay=\"auto\"\r\n                  aria-labelledby=\"range-slider\"\r\n                  min={0}\r\n                  max={(distance[distance.length - 1])}\r\n                  className=\"slider\"\r\n                />\r\n                <Line ref={el => chartContainer.current = el} redraw data={data} />\r\n              </div>\r\n            </div>\r\n          }\r\n          {!graph &&\r\n            <div class=\"card \">\r\n\r\n              <div class=\"card-body p-3\">\r\n                <button onClick={() => { setGraph(false) }} className=\"btn btn-outline-danger m-1 active\">Tout le parcours</button>\r\n                <button onClick={() => { setGraph(true) }} className=\"btn btn-outline-danger m-1\">Portion du parcours</button>\r\n                <Line ref={el => chartContainer.current = el} data={fullData} options={options} />\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}","import './App.css';\nimport {Map} from './Components/Run.js'\nimport Nav from './Components/Nav.js'\nimport Graph from './Components/Graph.js'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <Nav/>        \n        <Switch>\n          <Route path=\"/graph\" component={Graph}/>\n          <Route path=\"/run\" component={Map}/>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}