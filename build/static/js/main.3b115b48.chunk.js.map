{"version":3,"sources":["Components/Run.js","Components/Nav.js","Components/Analysis.js","Components/Upload.js","App.js","reportWebVitals.js","index.js"],"names":["Map","useState","map","setMap","mapContainer","useRef","running","setRunning","pause","setPause","timer","setTimer","dataTimeSeconds","setdataTimeSeconds","displayTime","setDisplayTime","dataDistance","setDataDistance","displayDistance","setDisplayDistance","geojson","useEffect","mapboxgl","container","current","style","center","zoom","on","resize","addSource","addLayer","initializeMap","coorddisplayTime","navigator","geolocation","watchPosition","data","coords","longitude","latitude","timerID","window","setInterval","geojsonLength","features","geometry","coordinates","length","push","from","to","lastDist","getDistance","prevCount","getSource","setData","clearInterval","Date","toISOString","substr","ref","el","className","onClick","class","accessToken","Navi","value","setValue","maxDeviceWidth","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","component","Link","minDeviceWidth","Navbar","as","Brand","src","height","alt","Analysis","props","source","setSource","isLoaded","setIsLoaded","comeSource","JSON","parse","history","location","state","geojsondata","markers","setGeojson","fitBounds","tracks","TrainingCenterDatabase","Activities","Activity","Lap","Track","Trackpoint","forEach","s","cc","parseFloat","Position","LongitudeDegrees","_text","LatitudeDegrees","distance","time","fq","graph","setGraph","totalDist","setTotalDist","totalTime","setTotalTime","runStart","setRunStart","runEnd","setRunEnd","chartContainer","Math","round","DistanceMeters","Time","toTimeString","split","HeartRateBpm","Value","fullDistance","fullFq","f","d","t1","t2","parts","d1","d2","getHours","getMinutes","getSeconds","time_diff","moments","j","min","max","actmin","pos","k","fullData","labels","datasets","fill","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","line","m","type","mode","scaleID","borderWidth","options","annotation","annotations","bounds","reduce","coord","extend","LngLatBounds","padding","Slider","valueLabelDisplay","aria-labelledby","redraw","Upload","cat","fileData","setfileData","File","FileReader","FileList","Blob","file","document","querySelector","files","reader","onload","fileLoadedEvent","result","result1","require","xml2json","compact","ignoreDeclaration","instructionHasAttributes","spaces","storeResults","target","readAsText","alert","onSubmit","e","preventDefault","pathname","App","path","Graph","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b115b48.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport { getDistance } from 'geolib';\r\n\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\nexport function Map() {\r\n    const [map, setMap] = useState(null);\r\n    const mapContainer = useRef(null);\r\n\r\n\r\n    const [running, setRunning] = useState(false);\r\n    const [pause, setPause] = useState(false);\r\n    const [timer, setTimer] = useState();\r\n\r\n    const [dataTimeSeconds, setdataTimeSeconds] = useState(0);\r\n    const [displayTime, setDisplayTime] = useState();\r\n\r\n    const [dataDistance, setDataDistance] = useState(0);\r\n    const [displayDistance, setDisplayDistance] = useState(0);\r\n\r\n    var geojsondata = {\r\n        'type': 'FeatureCollection',\r\n        'features': [\r\n            {\r\n                'type': 'Feature',\r\n                'properties': {},\r\n                'geometry': {\r\n                    'type': 'LineString',\r\n                    'coordinates': [\r\n\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n\r\n    const [geojson, setGeojson] = useState(geojsondata);\r\n\r\n\r\n    // Initialisation de la map\r\n    useEffect(() => {\r\n\r\n\r\n        const initializeMap = ({ setMap, mapContainer }) => {\r\n            const map = new mapboxgl.Map({\r\n                container: mapContainer.current,\r\n                style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n                center: [1, 46],\r\n                zoom: 5\r\n            })\r\n\r\n\r\n\r\n            map.on('load', function () {\r\n                setMap(map);\r\n                map.resize();\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': geojson\r\n                });\r\n\r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                        'line-join': 'round',\r\n                        'line-cap': 'round',\r\n                    },\r\n                    'paint': {\r\n                        'line-color': ' #dc3545 ',\r\n                        'line-width': 4\r\n                    }\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n\r\n        if (!map) initializeMap({ setMap, mapContainer });\r\n\r\n\r\n    }, [running]);\r\n\r\n\r\n    // Algorithme de course\r\n    useEffect(() => {\r\n        if (running && !pause) {\r\n\r\n            var coorddisplayTime = [];\r\n            navigator.geolocation.watchPosition(data => {\r\n                coorddisplayTime = [data.coords.longitude, data.coords.latitude]\r\n            });\r\n\r\n            var timerID = window.setInterval(function () {\r\n\r\n\r\n                var geojsonLength = geojson.features[0].geometry.coordinates.length;\r\n\r\n                // Actualisation de la distance et des coordonnées\r\n                if (coorddisplayTime.length !== 0 && coorddisplayTime !== geojson.features[0].geometry.coordinates[geojsonLength - 1]) {\r\n                    geojson.features[0].geometry.coordinates.push(coorddisplayTime);\r\n\r\n                    if (geojsonLength >= 1) {\r\n                        var from = {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength - 1][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength - 1][0],\r\n                        };\r\n                        var to = {\r\n                            latitude: geojson.features[0].geometry.coordinates[geojsonLength - 0][1],\r\n                            longitude: geojson.features[0].geometry.coordinates[geojsonLength - 0][0],\r\n                        };\r\n                        var lastDist = getDistance(from, to);\r\n                        setDataDistance(prevCount => prevCount + lastDist);\r\n                    }\r\n                }\r\n\r\n                // Actualisation du temps\r\n                setdataTimeSeconds(prevCount => prevCount + 1000);\r\n\r\n                map.getSource('route').setData(geojson);\r\n\r\n\r\n            }, 1000);\r\n            map.getSource('route').setData(geojson);\r\n\r\n            setTimer(timerID);\r\n\r\n        }\r\n        else if (running && pause) {\r\n            window.clearInterval(timer);\r\n        }\r\n        else if (!running) {\r\n            // Sauvegarde de la course\r\n\r\n\r\n            // Réinitialisation \r\n            window.clearInterval(timer)\r\n            geojson.features[0].geometry.coordinates.length = 0;\r\n            setPause(false);\r\n            setdataTimeSeconds(0);\r\n            setDataDistance(0);\r\n        }\r\n    }, [running, pause]);\r\n\r\n    useEffect(() => {\r\n        // Temps\r\n        setDisplayTime(new Date(dataTimeSeconds).toISOString().substr(11, 8));\r\n\r\n        // Distance\r\n        setDisplayDistance(dataDistance / 1000);\r\n    }, [dataTimeSeconds, dataDistance])\r\n\r\n    return (\r\n        <div>\r\n            <div ref={el => mapContainer.current = el} className=\"mapContainer\" />\r\n            {!running &&\r\n                <button className=\"btn btn-outline-danger m-1\" onClick={() => { setRunning(!running) }}>Démarrer</button>\r\n            }\r\n            {running && !pause &&\r\n                <div>\r\n                    <button className=\"btn btn-outline-danger m-1\" onClick={() => { setPause(!pause) }}>Mettre en pause</button>\r\n                    <button className=\"btn btn-outline-danger m-1\" onClick={() => { setRunning(!running) }}>Arrêter</button>\r\n                </div>\r\n            }\r\n            {running && pause &&\r\n                <div>\r\n                    <button className=\"btn btn-outline-danger active m-1\" onClick={() => { setPause(!pause) }}>Reprendre la course</button>\r\n                    <button className=\"btn btn-outline-danger m-1\" onClick={() => { setRunning(!running) }}>Arrêter</button>\r\n                </div>\r\n            }\r\n            <div class=\"card\">\r\n                <div class=\"card-body p-3\">\r\n                    <ul class=\"fa-ul\">\r\n                        <li><span class=\"fa-li\"><i class=\"fas fa-map-marker-alt\"></i></span><p>Distance : {displayDistance} km</p></li>\r\n                        <li><span class=\"fa-li\"><i class=\"far fa-hourglass\"></i></span><p>Durée : {displayTime}</p></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","// React\r\nimport { Link } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\n\r\n// Styles imports\r\nimport './Nav.css'\r\n\r\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\r\n\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport MediaQuery from 'react-responsive'\r\n\r\n\r\nconst styles = {\r\n    stickToBottom: {\r\n        width: '100%',\r\n        position: 'fixed',\r\n        bottom: 0,\r\n    },\r\n};\r\n\r\nexport default function Navi() {\r\n\r\n    const [value, setValue] = useState();\r\n\r\n\r\n    return (\r\n        <div>\r\n            <MediaQuery maxDeviceWidth={1000}>\r\n                <BottomNavigation\r\n                    value={value}\r\n                    onChange={(event, newValue) => {\r\n                        setValue(newValue);\r\n                    }}\r\n                    showLabels={true}\r\n                    className=\"fixed-bottom\"\r\n                >\r\n                    <BottomNavigationAction label=\"Run\" icon={<DirectionsRunIcon />} component={Link} to='/run' />\r\n                    <BottomNavigationAction label=\"Home\" icon={<HomeIcon />} component={Link} to='/' />\r\n                    <BottomNavigationAction label=\"Analyse\" icon={<TrendingUpIcon />} component={Link} to='/upload' />\r\n\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n\r\n\r\n            <MediaQuery minDeviceWidth={1000}>\r\n                <Navbar className=\"navbar navbar-dark \">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} to=\"/\" >        \r\n\r\n\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/\" className=\"navText\">Accueil</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/run\" className=\"navText \" >Course</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/upload\" className=\"navText\">Analyse</Nav.Link>\r\n                    </Nav>\r\n                    <Navbar.Brand className=\"justify-content-end\">\r\n                        <Navbar.Brand>\r\n                            <img\r\n                                src=\"bluebody.png\"\r\n                                height=\"40\"\r\n                                alt=\"Hashiru\"\r\n                            />\r\n                        </Navbar.Brand>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Brand className=\"justify-content-end\">\r\n                        <Navbar.Brand>\r\n                            <img\r\n                                src=\"bluetxt.png\"\r\n                                height=\"40\"\r\n                                alt=\"Hashiru\"\r\n                            />\r\n                        </Navbar.Brand>\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n            </MediaQuery>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport \"chartjs-plugin-annotation\";\r\nimport \"./Analysis.css\";\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\n\r\nexport default function Analysis(props) {\r\n\r\n  // Source provenant du composant Upload\r\n  const [source, setSource] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    var comeSource = JSON.parse(props.history.location.state.data);\r\n    setSource(comeSource);\r\n    setIsLoaded(true);\r\n  }, [props.history.location.state.data]);\r\n\r\n  /*\r\n   *\r\n   * Map Display\r\n   * \r\n   */\r\n\r\n  var geojsondata = {\r\n    'type': 'FeatureCollection',\r\n    'features': [\r\n      {\r\n        'type': 'Feature',\r\n        'properties': {},\r\n        'geometry': {\r\n          'type': 'LineString',\r\n          'coordinates': [\r\n\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  var markers = {\r\n    'type': 'FeatureCollection',\r\n    'features': [\r\n      {\r\n        // Départ\r\n        'type': 'Feature',\r\n        'geometry': {\r\n          'type': 'Point',\r\n          'coordinates': [0, 0]\r\n        },\r\n        'properties': {\r\n          'title': 'Début de la course'\r\n        }\r\n      },\r\n      {\r\n        // Arrivée\r\n        'type': 'Feature',\r\n        'geometry': {\r\n          'type': 'Point',\r\n          'coordinates': [2, 2]\r\n        },\r\n        'properties': {\r\n          'title': 'Fin de la course'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n  const [geojson, setGeojson] = useState(geojsondata);\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      const initializeMap = ({ setMap, mapContainer }) => {\r\n        const map = new mapboxgl.Map({\r\n          container: mapContainer.current,\r\n          style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n          center: [1, 46],\r\n          zoom: 5\r\n        })\r\n\r\n        map.on('load', function () {\r\n          setMap(map);\r\n          map.resize();\r\n          map.addSource('route', {\r\n            'type': 'geojson',\r\n            'data': geojson\r\n          });\r\n\r\n          map.addLayer({\r\n            'id': 'route',\r\n            'type': 'line',\r\n            'source': 'route',\r\n            'layout': {\r\n              'line-join': 'round',\r\n              'line-cap': 'round',\r\n            },\r\n            'paint': {\r\n              'line-color': ' #dc3545 ',\r\n              'line-width': 4\r\n            }\r\n          });\r\n\r\n          map.addSource('parcours-points', {\r\n            'type': 'geojson',\r\n            'data': {\r\n              'type': 'FeatureCollection',\r\n              'features': [\r\n                {\r\n                  'type': 'Feature',\r\n                  'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [-121.415061, 40.506229]\r\n                  }\r\n                },\r\n                {\r\n                  'type': 'Feature',\r\n                  'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [-121.505184, 40.488084]\r\n                  }\r\n                },\r\n                {\r\n                  'type': 'Feature',\r\n                  'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [-121.354465, 40.488737]\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          });\r\n\r\n          map.addLayer({\r\n            'id': 'points',\r\n            'type': 'circle',\r\n            'source': 'parcours-points',\r\n            'paint': {\r\n              'circle-radius': 6,\r\n              'circle-color': '#18182F'\r\n            }\r\n          });\r\n        });\r\n      }\r\n      if (!map) initializeMap({ setMap, mapContainer });\r\n      if (map) fitBounds();\r\n\r\n    }\r\n\r\n\r\n  },[isLoaded, map, fitBounds, geojson]);\r\n\r\n  // Initailisation du parcours\r\n  if (isLoaded) {\r\n    var tracks = source.TrainingCenterDatabase.Activities.Activity.Lap[0].Track[0].Trackpoint;\r\n\r\n    tracks.forEach(s => {\r\n      var cc = [parseFloat(s.Position.LongitudeDegrees._text), parseFloat(s.Position.LatitudeDegrees._text)];\r\n      geojsondata.features[0].geometry.coordinates.push(cc);\r\n    }); // Ajout des coordonnées du parcours à geojsondata\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  /*\r\n   *\r\n   * Graphs\r\n   *\r\n   */\r\n\r\n  // Variables\r\n\r\n\r\n  var distance = [];\r\n  var time = [];\r\n  var fq = [];\r\n  var coords = [];\r\n  const [value, setValue] = useState([0, 1000]);\r\n  const [graph, setGraph] = useState(false);\r\n  const [totalDist, setTotalDist] = useState(0);\r\n  const [totalTime, setTotalTime] = useState();\r\n  const [runStart, setRunStart] = useState();\r\n  const [runEnd, setRunEnd] = useState();\r\n  const chartContainer = useRef(null);\r\n\r\n\r\n  if (isLoaded) {\r\n    tracks.forEach(s => {\r\n      distance.push(Math.round(s.DistanceMeters._text))\r\n    });  // Initialisation du tableau de la distance\r\n\r\n    tracks.forEach(s => {\r\n      time.push(new Date(s.Time._text).toTimeString().split(' ')[0])\r\n    });  // Initialisation du tableau du temps\r\n\r\n    tracks.forEach(s => {\r\n      fq.push(s.HeartRateBpm.Value._text)\r\n    }); // Initialisation du tableau de la fréquence cardiaque\r\n  }\r\n\r\n  // Graphique complet --------------------------\r\n\r\n  const fullDistance = [];\r\n  const fullFq = [];\r\n  if (isLoaded) {\r\n    fq.forEach(f => {\r\n      fullFq.push(f)\r\n    }); // Initailisation de la fréquence cardiaque complète\r\n\r\n    distance.forEach(d => {\r\n      fullDistance.push(d)\r\n    }); // Initailisation de la distance complète\r\n  }\r\n\r\n  // Mise à jour des données globales\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setTotalDist(fullDistance[fullDistance.length - 1]);\r\n      setRunStart(time[0]);\r\n      setRunEnd(time[time.length - 1]);\r\n      setTotalTime(time_diff(time[time.length - 1], time[0]));\r\n    }\r\n  },);\r\n\r\n  // Calcul des moments\r\n  const moments = [];\r\n  if (isLoaded) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let min = 1 + (fq.length / 3) * j;\r\n      let max = (fq.length / 3) + ((fq.length / 3) * j);\r\n\r\n      let actmin = 99999;\r\n      let pos = \"\";\r\n      for (let k = min; k < max; k++) {\r\n        if (fq[k] < actmin) {\r\n          actmin = fq[k];\r\n          pos = k;\r\n        }\r\n      }\r\n      moments.push(pos);\r\n    }\r\n  }\r\n\r\n  var fullData = {\r\n    labels: fullDistance,\r\n    datasets: [\r\n      {\r\n        label: 'Fréquence cardiaque',\r\n\r\n        fill: false,\r\n        backgroundColor: 'rgba(210,0,0,0.4)',\r\n        borderColor: 'rgba(255,0,0,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n\r\n        pointBorderColor: 'rgba(210,0,0,0.4)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(210,0,0,0.4)',\r\n        pointHoverBorderColor: 'rgba(255,0,0,1)',\r\n        pointHoverBorderWidth: 2,\r\n\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n\r\n        data: fullFq\r\n      }\r\n    ]\r\n  };\r\n\r\n  let line = [];\r\n  moments.forEach(m => line.push({\r\n    type: 'line',\r\n    mode: 'vertical',\r\n    scaleID: 'x-axis-0',\r\n    value: m,\r\n    borderColor: '#2984c5',\r\n    borderWidth: 2\r\n  }));\r\n\r\n  const options = {\r\n    annotation: {\r\n      annotations: line\r\n    },\r\n  };\r\n\r\n  // Fin graphique complet --------------------------\r\n\r\n  // Graphique adaptatif --------------------------\r\n\r\n  var data = {\r\n    labels: distance,\r\n    datasets: [\r\n      {\r\n        label: 'Fréquence cardiaque',\r\n\r\n        fill: false,\r\n        backgroundColor: 'rgba(210,0,0,0.4)',\r\n        borderColor: 'rgba(255,0,0,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n\r\n        pointBorderColor: 'rgba(210,0,0,0.4)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(210,0,0,0.4)',\r\n        pointHoverBorderColor: 'rgba(255,0,0,1)',\r\n        pointHoverBorderWidth: 2,\r\n\r\n        pointRadius: 0,\r\n        pointHitRadius: 10,\r\n\r\n        data: fq\r\n      }\r\n    ]\r\n  };\r\n\r\n  // A chaque changement des données du slider, on réactualise le graphique et les points sur la carte\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      fq = []\r\n      tracks.forEach(s => {\r\n        if (s.DistanceMeters._text < value[1] && s.DistanceMeters._text > value[0]) {\r\n          fq.push(s.HeartRateBpm.Value._text)\r\n        } // Mise à jour de la fréquence cardiaque\r\n      });\r\n\r\n      distance = []\r\n      tracks.forEach(s => {\r\n        if (s.DistanceMeters._text < value[1] && s.DistanceMeters._text > value[0]) {\r\n          distance.push(Math.round(s.DistanceMeters._text))\r\n        }\r\n      }); // Mise à jour de la distance\r\n\r\n      coords = []\r\n      tracks.forEach(s => {\r\n        var cc = [s.Position.LongitudeDegrees._text, s.Position.LatitudeDegrees._text];\r\n        if (s.DistanceMeters._text < value[1] && s.DistanceMeters._text > value[0]) {\r\n          coords.push(cc)\r\n        }\r\n      }); // Mise à jour de la position\r\n\r\n      // Mise à jour des labels du graphique\r\n      data.labels = distance;\r\n      data.datasets[0].data = fq;\r\n\r\n      // Récupération de la position de l'intervalle\r\n      markers.features[0].geometry.coordinates = coords[0];\r\n      markers.features[1].geometry.coordinates = coords[coords.length - 1];\r\n\r\n      // Mise à jour sur la carte\r\n      if (map) {\r\n        map.getSource('parcours-points').setData(markers);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Fin graphique adaptatif --------------------------\r\n\r\n\r\n  useEffect(() => {\r\n    if (map) setMapData();\r\n  }, [map]); // Mise à jour de la carte lors du chargement des données\r\n\r\n  /*\r\n   *\r\n   * Functions\r\n   *\r\n   */\r\n  function fitBounds() {\r\n    var coordinates = geojsondata.features[0].geometry.coordinates;\r\n    var bounds = coordinates.reduce(function (bounds, coord) {\r\n      return bounds.extend(coord);\r\n    }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));\r\n\r\n    map.fitBounds(bounds, {\r\n      padding: 20\r\n    });\r\n  };\r\n\r\n  function setMapData() {\r\n    setGeojson(geojsondata);\r\n    map.getSource('route').setData(geojson);\r\n  }\r\n\r\n  function time_diff(t1, t2) {\r\n    var parts = t1.split(':');\r\n    var d1 = new Date(0, 0, 0, parts[0], parts[1], parts[2]);\r\n    parts = t2.split(':');\r\n    var d2 = new Date(new Date(0, 0, 0, parts[0], parts[1], parts[2]) - d1);\r\n    if (d2.getHours() !== 0) return (d2.getHours() + ':' + d2.getMinutes() + ':' + d2.getSeconds());\r\n    return (d2.getMinutes() + ':' + d2.getSeconds());\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  \r\n\r\n  /*\r\n   *\r\n   * Render\r\n   *\r\n   */\r\n\r\n  if (!isLoaded) {\r\n    return (<div><p>Loading...</p></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"px-5 pb-2\">\r\n      <div ref={el => mapContainer.current = el} className=\"mapContainer border border-danger  my-2\" />\r\n      <div class=\"row\">\r\n        <div class=\"col-md-4\">\r\n          <div class=\"card bg-white\">\r\n            <h5 className=\"card-header\">Résumé du parcours</h5>\r\n            <div class=\"card-body p-3\">\r\n              <ul class=\"fa-ul\">\r\n                <li><span class=\"fa-li\"><i class=\"fas fa-map-marker-alt\"></i></span><p>Distance : {totalDist / 1000} km</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"far fa-hourglass\"></i></span><p>Durée : {totalTime}</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"fas fa-clock\"></i></span><p>Heure de départ : {runStart}</p></li>\r\n                <li><span class=\"fa-li\"><i class=\"far fa-clock\"></i></span><p>Heure d'arrivée : {runEnd}</p></li>\r\n\r\n              </ul>\r\n              <button onClick={() => fitBounds()} className=\"btn btn-outline-danger m-1\">Recentrer</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-8 \">\r\n          {graph &&\r\n            <div class=\"card\">\r\n              <div class=\"card-body p-3\">\r\n                <button onClick={() => { setGraph(false) }} className=\"btn btn-outline-danger m-1\">Tout le parcours</button>\r\n                <button onClick={() => { setGraph(true) }} className=\"btn btn-outline-danger m-1 active\">Portion du parcours</button>\r\n                <p>Choisir la portion de parcours sur laquelle vous voulez analyser la FQ : </p>\r\n                <Slider\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  valueLabelDisplay=\"auto\"\r\n                  aria-labelledby=\"range-slider\"\r\n                  min={0}\r\n                  max={(distance[distance.length - 1])}\r\n                  className=\"slider\"\r\n                />\r\n                <Line ref={el => chartContainer.current = el} redraw data={data} />\r\n              </div>\r\n            </div>\r\n          }\r\n          {!graph &&\r\n            <div class=\"card \">\r\n\r\n              <div class=\"card-body p-3\">\r\n                <button onClick={() => { setGraph(false) }} className=\"btn btn-outline-danger m-1 active\">Tout le parcours</button>\r\n                <button onClick={() => { setGraph(true) }} className=\"btn btn-outline-danger m-1\">Portion du parcours</button>\r\n                <Line ref={el => chartContainer.current = el} data={fullData} options={options} />\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport \"./Upload.css\";\r\n\r\nconst Upload = (props) => {\r\n \r\n     const handleSubmit = e => {\r\n         e.preventDefault();\r\n         props.history.push({\r\n             pathname: '/analysis',\r\n             state:\r\n             {\r\n                 data:fileData\r\n             }\r\n         })\r\n     }\r\n\r\n  /**\r\n   * UPLOAD PART\r\n   * \r\n   */\r\n\r\n  var cat = '';\r\n  const [fileData, setfileData] = useState(1);\r\n  const showFile = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var file = document.querySelector('input[type=file]').files[0];\r\n      var reader = new FileReader()\r\n      var textFromFileLoaded;\r\n\r\n      reader.onload = function (fileLoadedEvent) {\r\n        textFromFileLoaded = fileLoadedEvent.target.result;\r\n        storeResults(textFromFileLoaded);\r\n      };\r\n\r\n      reader.readAsText(file, \"UTF-8\");\r\n\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  }\r\n\r\n\r\n  function storeResults(result) {\r\n    cat = result;\r\n    var convert = require('xml-js');\r\n    var result1 = convert.xml2json(cat, { compact: true, ignoreDeclaration: true, instructionHasAttributes: false, spaces: 4 });\r\n\r\n    setfileData(result1);\r\n  }\r\n\r\n \r\n     return (\r\n         <div className=\"container py-5\">\r\n             <div class=\"card bg-white\">\r\n            <h5 className=\"card-header\">Importer votre propre parcours</h5>\r\n            <div class=\"card-body p-3\">\r\n            <input type=\"file\" onChange={showFile} className=\"form-control-file m-1\"/>\r\n            <form onSubmit={handleSubmit}>\r\n             <input type=\"submit\" value=\"Envoyer\" className=\"btn btn-outline-danger m-1\" />\r\n             </form>\r\n            </div>\r\n\r\n          </div>\r\n         </div>\r\n     )\r\n }\r\n\r\nexport default Upload;","import './App.css';\nimport {Map} from './Components/Run.js'\nimport Nav from './Components/Nav.js'\nimport Graph from './Components/Analysis.js'\nimport Upload from './Components/Upload.js'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      <Nav/>        \n        <Switch>\n          <Route path=\"/upload\" component={Upload} />\n          <Route path=\"/analysis\" component={Graph}/>\n          <Route path=\"/run\" component={Map}/>\n\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}