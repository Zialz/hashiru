{"version":3,"sources":["logo.svg","Components/Button/Button.js","Components/Map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","state","active","getActive","bind","this","isActive","setState","class","onClick","React","Component","mapboxgl","accessToken","Map","lng","lat","zoom","componentDidMount","buttonActive","map","container","mapContainer","style","center","on","getCenter","toFixed","getZoom","geojson","console","log","features","geometry","coordinates","length","addSource","addLayer","coordtest","navigator","geolocation","watchPosition","data","coords","longitude","latitude","timer","window","setInterval","push","getSource","setData","timerID","clearInterval","className","ref","el","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e108906.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nexport class Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active:false\r\n        }\r\n        this.getActive = this.getActive.bind(this)\r\n    }\r\n    getActive() {\r\n        this.props.isActive(!this.state.active);\r\n        this.setState({active: !this.state.active})\r\n    }\r\n\r\n    render() {\r\n        return <button class={this.state.active ? \"btn btn-danger\" : \"btn btn-success\"} onClick={this.getActive }>\r\n            {this.state.active ? \"Arrêter\" : \"Démarrer\"}\r\n        </button>;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport {Button} from '../Button/Button.js'\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\nexport class Map extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lng: 5,\r\n            lat: 34,\r\n            zoom: 2,\r\n            active: false\r\n\r\n        };\r\n\r\n        this.isActive = this.isActive.bind(this)\r\n        this.componentDidMount = this.componentDidMount.bind(this)\r\n\r\n    }\r\n\r\n    isActive(buttonActive) {\r\n        this.setState({active: buttonActive},this.componentDidMount)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const map=  new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        })\r\n        map.on('move', () => {\r\n            this.setState({\r\n            lng: map.getCenter().lng.toFixed(4),\r\n            lat: map.getCenter().lat.toFixed(4),\r\n            zoom: map.getZoom().toFixed(2)\r\n            });\r\n        });\r\n        \r\n        var geojson = {\r\n            'type': 'FeatureCollection',\r\n            'features': [\r\n              {\r\n                'type': 'Feature',\r\n                'properties': {},\r\n                'geometry': {\r\n                  'type': 'LineString',\r\n                  'coordinates': [\r\n                    \r\n                  ]\r\n              }\r\n            }\r\n            ]\r\n        };\r\n\r\n\r\n\r\n\r\n        let active = this.state.active;\r\n\r\n        console.log('oui'+active)\r\n        map.on('load', function () {\r\n            if(active) {\r\n                \r\n                // geojson.features[0].geometry.coordinates.length = 0;\r\n                // var options = {timeout:60000};\r\n                // navigator.geolocation.getCurrentPosition(\r\n                // data => {\r\n                //      var coordPush1 = [data.coords.longitude, data.coords.latitude];\r\n                //      console.log(\"GCP : \"+coordPush1[0]);\r\n                //      geojson.features[0].geometry.coordinates.push(coordPush1); \r\n                // },\r\n                // err => {\r\n                //     if(err.code == 1) {\r\n                //         alert(\"Error: Access is denied!\");\r\n                //      } \r\n                //      else if( err.code == 2) {\r\n                //         alert(\"Error: Position is unavailable!\");\r\n                //      }\r\n                // },\r\n                // options\r\n                // );\r\n                geojson.features[0].geometry.coordinates.length = 0;\r\n\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': geojson\r\n                });\r\n        \r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                    'line-join': 'round',\r\n                    'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                    'line-color': ' #ff29cb ',\r\n                    'line-width': 4\r\n                    }\r\n                });\r\n    \r\n                \r\n                var coordtest = [];\r\n                navigator.geolocation.watchPosition(data => { coordtest = [data.coords.longitude, data.coords.latitude]\r\n                } );\r\n                \r\n                var timer = window.setInterval(function () {\r\n                    if(coordtest.length !==0) {\r\n                        geojson.features[0].geometry.coordinates.push(coordtest);\r\n                    }\r\n                    \r\n                    map.getSource('route').setData(geojson);\r\n                }, 1000);\r\n\r\n                this.setState({timerID: timer})\r\n            }\r\n            else {\r\n                window.clearInterval(this.state.timerID)\r\n            }\r\n        }.bind(this));\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='sidebarStyle'>\r\n                    <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\r\n                </div>\r\n                <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n                <Button isActive = {this.isActive} />\r\n                <h6>{this.state.active ? 'oui' : 'non'}</h6>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport {Map} from './Components/Map/Map.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hashiru 28/10 1900</h1>\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}