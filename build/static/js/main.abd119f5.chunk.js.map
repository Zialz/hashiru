{"version":3,"sources":["logo.svg","Components/Button/Button.js","Components/Map/Run.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","Map","props","useState","map","setMap","mapContainer","useRef","active","setActive","lng","setLng","lat","setLat","zoom","setZoom","timer","setTimer","geojson","useEffect","features","geometry","coordinates","length","coordtest","navigator","geolocation","watchPosition","data","coords","longitude","latitude","timerID","window","setInterval","push","getSource","setData","clearInterval","mapboxgl","container","current","style","center","on","getCenter","toFixed","getZoom","resize","console","log","addSource","addLayer","initializeMap","className","ref","el","onClick","accessToken","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAAe,I,iECIaA,IAAMC,U,MCM3B,SAASC,EAAIC,GAAS,IAAD,EACFC,mBAAS,MADP,mBACjBC,EADiB,KACZC,EADY,KAElBC,EAAeC,iBAAO,MAFJ,EAKIJ,oBAAS,GALb,mBAKjBK,EALiB,KAKTC,EALS,OAMFN,mBAAS,GANP,mBAMjBO,EANiB,KAMZC,EANY,OAOFR,mBAAS,IAPP,mBAOjBS,EAPiB,KAOZC,EAPY,OAQAV,mBAAS,GART,mBAQjBW,EARiB,KAQXC,EARW,OASEZ,qBATF,mBASjBa,EATiB,KASVC,EATU,KAapBC,EAAU,CACV,KAAQ,oBACR,SAAY,CACV,CACE,KAAQ,UACR,WAAc,GACd,SAAY,CACV,KAAQ,aACR,YAAe,OAyFzB,OAhFAC,qBAAU,WA8CN,GAAGX,EAAQ,CACPU,EAAQE,SAAS,GAAGC,SAASC,YAAYC,OAAS,EAKlD,IAAIC,EAAY,GAChBC,UAAUC,YAAYC,eAAc,SAAAC,GAAUJ,EAAY,CAACI,EAAKC,OAAOC,UAAWF,EAAKC,OAAOE,aAG9F,IAAIC,EAAUC,OAAOC,aAAY,WACN,IAApBV,EAAUD,QACTL,EAAQE,SAAS,GAAGC,SAASC,YAAYa,KAAKX,GAGlDpB,EAAIgC,UAAU,SAASC,QAAQnB,KAChC,KAEHD,EAASe,QAITC,OAAOK,cAActB,GAKpBZ,GAtEiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACvBF,EAAM,IAAImC,IAAStC,IAAI,CAC3BuC,UAAWlC,EAAamC,QACxBC,MAAO,qCACPC,OAAQ,CAACjC,EAAKE,GACdE,KAAMA,IAMRV,EAAIwC,GAAG,QAAQ,WACXjC,EAAOP,EAAIyC,YAAYnC,IAAIoC,QAAQ,IACnCjC,EAAOT,EAAIyC,YAAYjC,IAAIkC,QAAQ,IACnC/B,EAAQX,EAAI2C,UAAUD,QAAQ,OAIlC1C,EAAIwC,GAAG,QAAQ,WACXvC,EAAOD,GACPA,EAAI4C,SACJC,QAAQC,IAAI,MAAM1C,GAClBJ,EAAI+C,UAAU,QAAS,CACnB,KAAQ,UACR,KAAQjC,IAGZd,EAAIgD,SAAS,CACT,GAAM,QACN,KAAQ,OACR,OAAU,QACV,OAAU,CACV,YAAa,QACb,WAAY,SAEZ,MAAS,CACT,aAAc,YACd,aAAc,QAiChBC,CAAc,CAAEhD,SAAQC,mBAGnC,CAACE,IAKA,gCACI,qBAAK8C,UAAU,eAAf,SACI,8CAAiB5C,EAAjB,gBAAmCE,EAAnC,YAAiDE,OAErD,qBAAKyC,IAAK,SAAAC,GAAE,OAAIlD,EAAamC,QAAUe,GAAIF,UAAU,iBACrD,wBAAQG,QAAS,WAAOhD,GAAWD,IAAnC,wBAvHZ+B,IAASmB,YAAc,gGCMRC,MATf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,qDACA,cAACrD,EAAD,QCIS2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.abd119f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nexport class Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active:false\r\n        }\r\n        this.getActive = this.getActive.bind(this)\r\n    }\r\n    getActive() {\r\n        this.props.isActive(!this.state.active);\r\n        this.setState({active: !this.state.active})\r\n    }\r\n\r\n    render() {\r\n        return <button class={this.state.active ? \"btn btn-danger\" : \"btn btn-success\"} onClick={this.getActive }>\r\n            {this.state.active ? \"Arrêter\" : \"Démarrer\"}\r\n        </button>;\r\n    }\r\n}","import React, { useEffect, useState, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl, { clearPrewarmedResources } from 'mapbox-gl';\r\nimport {Button} from '../Button/Button.js'\r\nimport { act } from 'react-dom/test-utils';\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm90b3RvZ3JpbCIsImEiOiJja2Y1anFlYTAwbmxrMnlwOTZmNmd3OGxzIn0.wpkEfgXt-XFfU_yWUgx7BA';\r\n\r\n\r\nexport function Map(props)  {\r\n    const [map, setMap] = useState(null);\r\n    const mapContainer = useRef(null);\r\n\r\n\r\n    const [active, setActive] = useState(false);\r\n    const [lng, setLng] = useState(5);\r\n    const [lat, setLat] = useState(34);\r\n    const [zoom, setZoom] = useState(2);\r\n    const [timer, setTimer] = useState();\r\n\r\n\r\n\r\n    var geojson = {\r\n        'type': 'FeatureCollection',\r\n        'features': [\r\n          {\r\n            'type': 'Feature',\r\n            'properties': {},\r\n            'geometry': {\r\n              'type': 'LineString',\r\n              'coordinates': [\r\n                \r\n              ]\r\n          }\r\n        }\r\n        ]\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        \r\n        const initializeMap = ({ setMap, mapContainer }) => {\r\n            const map = new mapboxgl.Map({\r\n              container: mapContainer.current,\r\n              style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n              center: [lng, lat],\r\n              zoom: zoom\r\n            })\r\n        \r\n\r\n\r\n            \r\n            map.on('move', () => {\r\n                setLng(map.getCenter().lng.toFixed(4));\r\n                setLat(map.getCenter().lat.toFixed(4));\r\n                setZoom(map.getZoom().toFixed(2));\r\n            });\r\n            \r\n\r\n            map.on('load', function () {\r\n                setMap(map);\r\n                map.resize();\r\n                console.log(\"ici\"+active)\r\n                map.addSource('route', {\r\n                    'type': 'geojson',\r\n                    'data': geojson\r\n                });\r\n        \r\n                map.addLayer({\r\n                    'id': 'route',\r\n                    'type': 'line',\r\n                    'source': 'route',\r\n                    'layout': {\r\n                    'line-join': 'round',\r\n                    'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                    'line-color': ' #ff29cb ',\r\n                    'line-width': 4\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        if(active) {\r\n            geojson.features[0].geometry.coordinates.length = 0;\r\n\r\n            \r\n\r\n        \r\n            var coordtest = [];\r\n            navigator.geolocation.watchPosition(data => { coordtest = [data.coords.longitude, data.coords.latitude]\r\n            } );\r\n            \r\n            var timerID = window.setInterval(function () {\r\n                if(coordtest.length !==0) {\r\n                    geojson.features[0].geometry.coordinates.push(coordtest);\r\n                }\r\n                \r\n                map.getSource('route').setData(geojson);\r\n            }, 1000);\r\n\r\n            setTimer(timerID);\r\n\r\n        }\r\n        else {\r\n            window.clearInterval(timer)\r\n        };\r\n            \r\n        \r\n\r\n        if (!map) initializeMap({ setMap, mapContainer });\r\n\r\n\r\n    }, [active] );\r\n        \r\n        \r\n        \r\n    return (\r\n        <div>\r\n            <div className='sidebarStyle'>\r\n                <div>Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}</div>\r\n            </div>\r\n            <div ref={el => mapContainer.current = el} className=\"mapContainer\" />\r\n            <button onClick={() => {setActive(!active)}}>Activer</button>\r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport {Map} from './Components/Map/Run.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hashiru 03/11 13:00</h1>\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}